# name: ci
name: CI Pipeline

on: 
  push:
    branches:
      - main 
      - "*"
  

jobs:
  lint:
    runs-on: ubuntu-latest 
    
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Lint with Black and Flake8
      run: |
        docker run --rm -v $(pwd):/code -w /code python:3.9 bash -c "pip install flake8 black && black . && flake8 . --exclude=.git,__pycache__"

  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Build
      run: |
        docker run --rm -v $(pwd):/code -w /code python:3.9 bash -c "pip install -r requirements.txt && python build.py"


  test:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:19.03.12
        options: --privileged

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        docker run --rm -v $(pwd):/code -w /code python:3.9 bash -c "pip install -r requirements.txt"

    - name: Run tests
      run: |
        docker run --rm -v $(pwd):/code -w /code python:3.9 bash -c "pip install -r requirements.txt && pytest"
  # tests:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2

  #   - name: Run tests with pytest and coverage
  #     uses: docker://python:3.8
  #     with:
  #       entrypoint: /bin/sh
  #       args: |
  #         - -c
  #         - |
  #           pip install pytest pytest-cov
  #           pytest --cov=my_package --cov-report=term-missing --cov-fail-under=80

# jobs:
#   super-lint:
#     name: Lint code base
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Run Super-Linter
#         uses: github/super-linter@v4
#         env:
#           DEFAULT_BRANCH: main
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



  # Build_test:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["pypy3.9", "pypy3.10", "3.9", "3.10", "3.11", "3.12"]

  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     # You can test your matrix by printing the current Python version
  #     - name: Display Python version
  #       run: python -c "import sys; print(sys.version)"

  #     - name: install dependencies
  #       run: python -m pip install --upgrade pip setuptools wheel
 
      
  #     - name: Test with pytest
  #       run: |
  #         pip install pytest pytest-cov
  #         pytest main.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=com --cov-report=xml --cov-report=html
  #     - name: Upload pytest test results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: pytest-results-${{ matrix.python-version }}
  #         path: junit/test-results-${{ matrix.python-version }}.xml
  #       # Use always() to always run this step to publish test results when there are test failures
  #       if: ${{ always() }}
  
   
  

  
